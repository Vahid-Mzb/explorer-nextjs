import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Header from "@/components/header";
import SearchComp from "@/components/search";
import BlocksTrans from "@/components/blocksTrans"; // Correcting the typo from "BocksTrans" to "BlocksTrans"
import { faReceipt } from "@fortawesome/free-solid-svg-icons";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";

function Transactions() {
  const router = useRouter();
  const [page, setPage] = useState(parseInt(router.query.page, 10) || 1);
  const [search, setSearch] = useState(false);

  useEffect(() => {
    const handleRouteChange = () => {
      const updatedPage = parseInt(router.query.page, 10) || 1;
      setPage(updatedPage);
    };

    handleRouteChange();
    router.events.on("routeChangeComplete", handleRouteChange);
    return () => {
      router.events.off("routeChangeComplete", handleRouteChange);
    };
  }, [router.query.page]);

  const handleChange = (event, value) => {
    router.push(
      { pathname: router.pathname, query: { ...router.query, page: value } },
      undefined,
      { shallow: true }
    );
  };

  const myResult = (result) => {
    setSearch(result);
  };

  return (
    <>
      <Head>
        <title>Namada Explorer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.main}>
        <Header />
        <SearchComp myResult={myResult} />
        {!search && ( // Use explicit negation for clarity
          <>
            <BlocksTrans
              data={page.toString()}
              logo={faReceipt}
              param={"transactions"}
              type={"transactions"}
            />
            <Stack spacing={2} sx={{ bgcolor: "black", p: 2 }}>
              <Pagination
                color="secondary"
                page={page}
                onChange={handleChange}
                count={10000} // Dynamically calculate based on total results
                sx={{
                  "& .MuiPaginationItem-root": {
                    color: "#fff",
                  },
                }}
              />
            </Stack>
          </>
        )}
      </section>
    </>
  );
}

export default Transactions;
