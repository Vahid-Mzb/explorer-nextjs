import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Header from "@/components/header";
import SearchComp from "@/components/search";
import axios from "axios";
import Address from "@/components/fulladd";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import Addresss from "@/components/fulladd1";

function Proposals() {
  const router = useRouter();
  const [allData, setAllData] = useState([]);
  const [currentPageData, setCurrentPageData] = useState([]);
  const itemsPerPage = 10;
  const initialPage = parseInt(router.query.page, 10) || 1;
  const [page, setPage] = useState(initialPage);
  const [search, setSearch] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          "https://namadaindexer.nodeworld.xyz/proposals"
        );
        console.log(response.data);
        const reversedData = response.data.reverse();
        setAllData(reversedData); // Adjust based on actual response structure
        setCurrentPageData(
          reversedData.slice((page - 1) * itemsPerPage, page * itemsPerPage)
        );
      } catch (error) {
        console.error("Failed to fetch data:", error);
      }
    };

    fetchData();
  }, [page, router.query.page]);

  const handleChange = (event, value) => {
    router.push(
      { pathname: router.pathname, query: { ...router.query, page: value } },
      undefined,
      { shallow: true }
    );
    setPage(value);
  };

  const pageCount = Math.ceil(allData.length / itemsPerPage);

  const myResult = (result) => {
    setSearch(result);
  };

  return (
    <>
      <Head>
        <title>Namada Explorer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.main}>
        <Header />
        <SearchComp myResult={myResult} />
        {!search && (
          <>
            <section className={styles.latestResults_body_trans}>
              <section>
                <section className={styles.latestResults_body_title_trans}>
                  Proposals
                </section>
                <table className={styles.latestResults_body_table_trans}>
                  <tbody>
                    {/* Header Row */}
                    <tr
                      className={`${styles.latestResults_body_tr_trans} ${styles.lastTd}`}
                      key="headerRow"
                    >
                      <td className={styles.tdBlock}>
                        <b>ID</b>
                      </td>
                      <td className={styles.tdBlock}>
                        <b>Author</b>
                      </td>
                      <td className={styles.tdBlock}>
                        <b>Type</b>
                      </td>
                      <td className={styles.tdBlock}>
                        <b>Voting start</b>
                      </td>
                      <td className={styles.tdBlock}>
                        <b>Voting end</b>
                      </td>
                      {/* <td className={styles.tdBlock}>
                        <b>Grace epoch</b>
                      </td> */}
                      <td className={styles.tdValue}>
                        <b>Status</b>
                      </td>
                    </tr>
                    {/* Data Rows */}
                    {currentPageData.map((proposal, index) => (
                      <tr
                        className={`${styles.latestResults_body_tr_trans} ${
                          index === currentPageData.length - 1
                            ? styles.lastTd
                            : ""
                        }`}
                        key={7852}
                      >
                        <td className={styles.tdBlock}>
                          <section className={styles.blueText}>
                            {proposal.proposal_id}
                          </section>
                        </td>
                        <td className={styles.tdBlock}>
                          <section className={styles.blueText}>
                            <Addresss fullAddress={proposal.author} />
                          </section>
                        </td>
                        <td className={styles.tdBlock}>
                          <section>{proposal.type}</section>
                        </td>
                        <td className={styles.tdBlock}>
                          <section>{proposal.start_epoch}</section>
                        </td>
                        <td className={styles.tdBlock}>
                          <section>{proposal.end_epoch}</section>
                        </td>
                        <td className={styles.tdValue}>{proposal.status}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </section>
            </section>
            <Stack spacing={2} sx={{ bgcolor: "black", p: 2 }}>
              <Pagination
                color="secondary"
                page={page}
                onChange={handleChange}
                count={pageCount}
                sx={{
                  "& .MuiPaginationItem-root": {
                    color: "#fff",
                    borderColor: "rgba(255, 255, 255, 0.23)",
                  },
                }}
              />
            </Stack>
          </>
        )}
      </section>
    </>
  );
}

export default Proposals;
